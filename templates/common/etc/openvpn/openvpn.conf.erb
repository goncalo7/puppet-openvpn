local <%= scope['::ipaddress_primary'] %>

port <%= scope['::openvpn::server_port'] %>

proto <%= scope['::openvpn::server_proto'] %>

dev <%= scope['::openvpn::server_dev'] %>

ca <%= scope['::openvpn::easy_rsa_dir_path'] %>/keys/ca.crt
cert <%= scope['::openvpn::easy_rsa_dir_path'] %>/keys/server.crt
key <%= scope['::openvpn::easy_rsa_dir_path'] %>/keys/server.key
crl-verify <%= scope['::openvpn::config_dir_path'] %>/crl.pem

dh <%= scope['::openvpn::easy_rsa_dir_path'] %>/keys/dh<%= scope['::openvpn::key_size'] %>.pem

server <%= scope['::openvpn::server_subnet'] %>

ifconfig-pool-persist ipp.txt

<% unless [:undef, nil].include? scope['::openvpn::server_push'] -%>
<% scope['::openvpn::server_push'].each do |value| -%>
push "<%= value %>"
<% end -%>
<% else -%>
;push "route 192.168.10.0 255.255.255.0"
<% end -%>

keepalive 10 120

# For extra security beyond that provided
# by SSL/TLS, create an "HMAC firewall"
# to help block DoS attacks and UDP port flooding.
#
# Generate with:
#   openvpn --genkey --secret ta.key
#
# The server and each client must have
# a copy of this key.
# The second parameter should be '0'
# on the server and '1' on the clients.
;tls-auth ta.key 0 # This file is secret

# Select a cryptographic cipher.
# This config item must be copied to
# the client config file as well.
;cipher BF-CBC        # Blowfish (default)
;cipher AES-128-CBC   # AES
;cipher DES-EDE3-CBC  # Triple-DES

# Enable compression on the VPN link.
# If you enable it here, you must also
# enable it in the client config file.
<% if scope['::openvpn::server_compression'] -%>
comp-lzo
<% else -%>
;comp-lzo
<% end -%>


# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
#
# You can uncomment this out on
# non-Windows systems.
<% if scope['::openvpn::server_user'] -%>
user nobody
<% else -%>
;user nobody
<% end -%>
<% if scope['::openvpn::server_group'] -%>
group nogroup
<% else -%>
;group nogroup
<% end -%>
persist-key
persist-tun

status openvpn-status.log

;log         openvpn.log
;log-append  openvpn.log

verb 3

# txqueuelen
<% if scope['::openvpn::txqueuelen'] -%>
txqueuelen <%= scope['::openvpn::txqueuelen'] %>
<% end -%>


#script-security
<% if scope['::openvpn::script_security'] -%>
script-security <%= scope['::openvpn::script_security'] %>
<% end -%>

#client-connect
<% if scope['::openvpn::client_connect'] -%>
client-connect <%= scope['::openvpn::client_connect'] %>
<% end -%>

#client-disconnect
<% if scope['::openvpn::client_disconnect'] -%>
client-disconnect <%= scope['::openvpn::client_disconnect'] %>
<% end -%>

#ping
<% if scope['::openvpn::ping'] -%>
ping <%= scope['::openvpn::ping'] %>
<% end -%>

#ping-exit
<% if scope['::openvpn::ping_exit'] -%>
ping-exit <%= scope['::openvpn::ping_exit'] %>
<% end -%>

#plugin
<% if scope['::openvpn::plugin'] -%>
plugin <%= scope['::openvpn::plugin'] %>
<% end -%>

#management
<% if scope['::openvpn::management'] -%>
management <%= scope['::openvpn::management'] %>
<% end -%>

# The maximum number of concurrently connected
# clients we want to allow.
<% if scope['::openvpn::max_clients'] -%>
max-clients <%= scope['::openvpn::max_clients'] %>
<% else -%>
;max-clients 100
<% end -%>

